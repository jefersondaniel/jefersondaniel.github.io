<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jeferson Daniel</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2016-05-01T00:00:00-03:00</updated><entry><title>Mantendo padrões de código Javascript</title><link href="/blog/mantendo-padroes-de-codigo-javascript/" rel="alternate"></link><updated>2016-05-01T00:00:00-03:00</updated><author><name>Jeferson Daniel</name></author><id>tag:,2016-05-01:blog/mantendo-padroes-de-codigo-javascript/</id><summary type="html">&lt;p&gt;Um código desorganizado, com variáveis seguindo diferentes padrões de escrita, sem atenção para declarações e desuso de variáveis é muito propenso a erros. Para facilitar nossa vida existem ferramentas de lint como o &lt;a href="http://eslint.org"&gt;ESLint&lt;/a&gt;, que vou explicar nesse post.&lt;/p&gt;
&lt;p&gt;O ESLint é uma ferramenta bastante flexível para análise de código que busca trechos problemáticos ou que não seguem padrões configurados. Por exemplo: identação, nomenclatura de variáveis e globais. Essa análise pode ser feita através da linha de comando ou até mesmo no seu editor de código. É preciso que você tenha o nodejs instalado em seu computador para poder instalar esse lint com o comando:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;npm install -g eslint
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isso você pode criar um arquivo ".eslintrc" na pasta de seu projeto com as regras recomendadas e adicionar as suas preferências. Podemos testar a seguinte configuração para projetos frontend:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eslint:recommended&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;env&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;browser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;rules&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;semi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;never&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;camelcase&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;warn&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Esse arquivo estende um conjunto de regras recomendado e especifica o ambiente browser, isso serve que variaveis globais do navegador não sejam interpretadas como não definidas. Além disso o arquivo adiciona as seguintes regras:
&lt;em&gt; semi: Verifica se o código nunca usa ponto-e-virgula nos finais de linha,trata como erro linhas de código fora do padrão.
&lt;/em&gt; camelcase: Verifica se as variaveis são nomeadas seguindo o padrão &lt;em&gt;camelCase&lt;/em&gt;, trata como aviso linhas de código fora do padrão.&lt;/p&gt;
&lt;p&gt;Você pode testar criando um arquivo "lala.js" e rodando o comando &lt;strong&gt;eslint lala.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var a = 1
var ugly_var = &amp;quot;2&amp;quot;;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;eslint lala.js

/home/jeferson/lala.js
  1:5   error    &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; is defined but never used               no-unused-vars
  2:5   warning  Identifier &lt;span class="s1"&gt;&amp;#39;ugly_var&amp;#39;&lt;/span&gt; is not in camel &lt;span class="k"&gt;case&lt;/span&gt;  camelcase
  2:5   error    &lt;span class="s1"&gt;&amp;#39;ugly_var&amp;#39;&lt;/span&gt; is defined but never used        no-unused-vars
  2:19  error    Extra semicolon                             semi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Viu como é fácil manter padrões de código? ainda existe bastante &lt;a href="http://eslint.org/docs/rules"&gt;regras&lt;/a&gt; e &lt;a href="http://eslint.org/docs/user-guide/integrations"&gt;plugins&lt;/a&gt; para esse linter. Espero que tenha se interessado, pois é uma ferramenta bastante útil e que fica melhor se configurada no seu editor de código. Com o Sublime, basta instalar os pacotes &lt;strong&gt;Sublime-Linter&lt;/strong&gt; e &lt;strong&gt;Sublime-Linter-contrib-eslint&lt;/strong&gt;&lt;/p&gt;</summary></entry><entry><title>Diminuindo o tempo de carregamento de sites</title><link href="/blog/diminuindo-o-tempo-de-carregamento-de-sites/" rel="alternate"></link><updated>2015-06-29T00:00:00-03:00</updated><author><name>Jeferson Daniel</name></author><id>tag:,2015-06-29:blog/diminuindo-o-tempo-de-carregamento-de-sites/</id><summary type="html">&lt;p&gt;Com a popularidade de frameworks como AngularJS e a facilidade de plugins JQuery se tornou comum exagerar em quantidade de scripts e css. Também surgiram novos problemas de performance como a otimização para mobile e a performance do código javascript. Ainda assim os problemas graves de performance costumam ser os mesmos: Falta de cache e excesso de plugins.&lt;/p&gt;
&lt;p&gt;Otimizar esses aspectos é algo que melhora tanto a usabilidade quanto a reputação no Google. Deixarei aqui coisas que levo em consideração e links relacionados.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cache&lt;/strong&gt;: Melhora muito usar alguma solução de cache como o Varnish Cache pois o cache vai desafogar o servidor web da tarefa de servir tanto arquivos estáticos (imagens, scripts, css) quanto arquivos dinâmicos. Outra solução de cache que tenho usado para projetos pessoais é o serviço CloudFlare. A vantagem de usar um serviço assim é que, ao invés de configurar seu próprio Varnish, os arquivos estáticos são servidos diretamente do CloudFare. Ou seja,não consome servidores e tem um plano gratuito.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unificação de arquivos javascript e css&lt;/strong&gt;: Juntar todos javascripts em um só e fazer o mesmo com os css pode diminuir o tempo de carregamento. Além disso, mover as tags de script para o fim do HTML também ajuda. Ferramentas como YSlow e Google Page Speed podem indicar a melhor forma de fazer essas e outras otimizações.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Carregamento preguiçoso (Lazy Loading)&lt;/strong&gt;: Suponha que você está fazendo uma site que consulta uma lista de produtos recomendados na página inicial. Se esse conteúdo for carregado junto com o restante do site o usuário terá de esperar tanto ele quanto as recomendações para ver tudo. Em casos assim é conveniente carregar somente o conteúdo do site e chamar o mais demorado em algum ajax, pois assim o usuário espera menos para ver o conteúdo principal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfim, existe bastante coisa para se otimizar tempo de resposta e a solução  é estar continuamente usando ferramentas de teste. Eu uso YSlow para testes do frontend e Apache Benchmark (AB) para testes de carga no backend. Boa sorte com seus testes.&lt;/p&gt;
&lt;h2&gt;Referências&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.varnish-cache.org/" target="_blank"&gt;Vanish Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.wptotal.com/duvidas-cloudflare/" target="_blank"&gt;Dúvidas sobre o Cloudfare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://yslow.org/" target="_blank"&gt;YSlow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Plataformas para Python, Node e Ruby com plano gratuito</title><link href="/blog/plataformas-para-python-node-e-ruby-com-plano-gratuito/" rel="alternate"></link><updated>2014-11-11T00:00:00-02:00</updated><author><name>Jeferson Daniel</name></author><id>tag:,2014-11-11:blog/plataformas-para-python-node-e-ruby-com-plano-gratuito/</id><summary type="html">&lt;p&gt;Quem procura serviços de hospedagem para testar algum aplicativo em Python, Node ou Ruby pode contar com soluções de plataforma como serviço que oferecem planos gratuitos:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://heroku.com"&gt;Heroku&lt;/a&gt; - É uma das plataformas mais populares hoje. Oferece suporte para diverças linguagens, entre elas Python, NodeJS, Java, Ruby, PHP. O Heroku automatiza a criação de uma nova máquina virtual e configura todo o ambiente.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.openshift.com"&gt;OpenShift&lt;/a&gt; - Com a vantagem de ser opensource e mantido pela RedHat, essa plataforma é bastante flexivel e oferece suporte para várias linguagens e banco de dados. Exemplo: Ruby, Haskell, Python, MongoDb, Postgree.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cloudcontrol.com"&gt;CloudControl&lt;/a&gt; - É um plataforma europeia muito semelhante ao Heroku. Permite projetos em Node, Java, PHP, Python e Ruby.&lt;/p&gt;</summary></entry><entry><title>Sopa de pedras e sapos fervidos</title><link href="/blog/sopa-de-pedras-e-sapos-fervidos/" rel="alternate"></link><updated>2014-11-11T00:00:00-02:00</updated><author><name>Jeferson Daniel</name></author><id>tag:,2014-11-11:blog/sopa-de-pedras-e-sapos-fervidos/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Três soldados voltavam para casa depois da guerra e estavam com fome. Quando eles viram o aldeia à frente tinham certeza de que os moradores lhes dariam
uma refeição. Mas quando chegaram lá, encontraram as portas trancadas e as janelas fechadas. Depois de muitos anos de guerra, os moradores estavam com falta de comida, e acumulavam o que tinham.&lt;/p&gt;
&lt;p&gt;Um dos soldados esquentou um caldeirão com água e cuidadosamente colocou três pedras dentro dele. Os moradores espantados sairam para assistir.
"Esta é a sopa de pedra", os soldados explicaram. "Isso é tudo o que coloca nela?", Perguntaram os moradores. "Absolutamente, embora alguns dizem que o gosto é ainda melhor com alguns cenouras." &lt;/p&gt;
&lt;p&gt;Um aldeão fugiu, retornando em determinado momento com uma cesta de cenouras que tinha acumulado. Dois munitos depois, os moradores novamente perguntou: "É só isso?". "Bem", disse que os soldados ", um par de batatas lhe dão corpo."
Então correu outro aldeão. Durante a hora seguinte, os soldados listaram mais ingredientes que melhoram a sopa: carne, alho, sal e ervas.&lt;/p&gt;
&lt;p&gt;Cada vez um morador diferente ia fugir para buscar seus mantimentos pessoais. Eventualmente, quando eles haviam produzido uma grande panela de sopa quente. Os soldados removeram as pedras, e sentaram-se com toda a aldeia para desfrutar a refeição que nenhum deles tinha comido em meses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O trecho acima foi retirado do livro Pragmatic Programmer. A moral mais importante da história é que os soldados agiram como catalizadores, uniram os aldeões em um objetivo para que pudessem alcançar algo que não conseguiriam sozinhos. No fim, todos ganharam.&lt;/p&gt;</summary></entry></feed>